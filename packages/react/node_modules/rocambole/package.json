{
  "_args": [
    [
      {
        "raw": "rocambole@git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
        "scope": null,
        "escapedName": "rocambole",
        "name": "rocambole",
        "rawSpec": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
        "spec": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
          "sshUrl": "git+ssh://git@github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
          "httpsUrl": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
          "gitUrl": "git://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
          "shortcut": "github:millermedeiros/rocambole#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
          "directUrl": "https://raw.githubusercontent.com/millermedeiros/rocambole/1bd5044df1d6c888a1bd1b511158fb34b011e9aa/package.json"
        }
      },
      "C:\\Users\\MIKEW~1\\AppData\\Local\\Temp\\apm-install-dir-116819-22884-16zxot1\\node_modules\\react\\node_modules\\jsxformat"
    ]
  ],
  "_from": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
  "_id": "rocambole@0.3.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/react/rocambole",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rocambole@git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
    "scope": null,
    "escapedName": "rocambole",
    "name": "rocambole",
    "rawSpec": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
    "spec": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
      "sshUrl": "git+ssh://git@github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
      "httpsUrl": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
      "gitUrl": "git://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
      "shortcut": "github:millermedeiros/rocambole#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
      "directUrl": "https://raw.githubusercontent.com/millermedeiros/rocambole/1bd5044df1d6c888a1bd1b511158fb34b011e9aa/package.json"
    }
  },
  "_requiredBy": [
    "/react/jsxformat"
  ],
  "_resolved": "git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
  "_shasum": "e468cccc2c1384fce4eda8a0adfde7bb6c8161eb",
  "_shrinkwrap": null,
  "_spec": "rocambole@git+https://github.com/millermedeiros/rocambole.git#1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
  "_where": "C:\\Users\\MIKEW~1\\AppData\\Local\\Temp\\apm-install-dir-116819-22884-16zxot1\\node_modules\\react\\node_modules\\jsxformat",
  "author": {
    "name": "Miller Medeiros",
    "email": "http://blog.millermedeiros.com"
  },
  "bugs": {
    "url": "https://github.com/millermedeiros/rocambole/issues"
  },
  "dependencies": {
    "esprima-fb": "^4001.3001.0-dev-harmony-fb"
  },
  "description": "Recursively walk and transform EcmaScript AST",
  "devDependencies": {
    "expect.js": "0.2",
    "istanbul": "~0.1.23",
    "mocha": "~1.7"
  },
  "directories": {
    "test": "test"
  },
  "gitHead": "1bd5044df1d6c888a1bd1b511158fb34b011e9aa",
  "homepage": "https://github.com/millermedeiros/rocambole#readme",
  "keywords": [
    "ast",
    "walk",
    "syntax",
    "source",
    "tree",
    "traversal",
    "falafel",
    "burrito",
    "esprima"
  ],
  "license": "MIT",
  "main": "rocambole.js",
  "name": "rocambole",
  "optionalDependencies": {},
  "readme": "# Rocambole [![Build Status](https://secure.travis-ci.org/millermedeiros/rocambole.png?branch=master)](https://travis-ci.org/millermedeiros/rocambole)\r\n\r\n![rocambole](https://raw.github.com/millermedeiros/rocambole/master/rocambole.jpg)\r\n\r\nRecursively walk and add extra information/helpers to [Esprima / Mozilla\r\nSpiderMonkey Parser API](http://esprima.org/doc/index.html#ast) compatible AST.\r\n\r\nThe main difference between other tools is that it also keeps information about\r\ntokens and white spaces and it is meant to be used to transform the tokens and\r\nnot the string values itself.\r\n\r\nThis library is specially useful for non-destructive AST manipulation.\r\n\r\n\r\n## Inspiration\r\n\r\nThis module was heavily inspired by\r\n[node-falafel](https://github.com/substack/node-falafel) and\r\n[node-burrito](https://github.com/substack/node-burrito) but I needed more\r\ninformation than what is currently available on falafel (specially about\r\ntokens, empty lines and white spaces) and also needed to do the node traversing\r\non the opposite order (start from leaf nodes). The amount of changes required\r\nto introduce the new features and the differences on the concept behind the\r\ntool justified a new project.\r\n\r\nIt was created mainly to be used on\r\n[esformatter](https://github.com/millermedeiros/esformatter/).\r\n\r\n\r\n\r\n## Extra Tokens\r\n\r\nBesides all the regular tokens returned by `esprima` we also add a few more\r\nthat are important for non-destructive transformations:\r\n\r\n * `WhiteSpace`\r\n   - Can store multiple white spaces (tabs are considered white space, line\r\n     breaks not). Important if you want to do non-destructive replacements that\r\n     are white-space sensitive.\r\n   - Multiple subsequent white spaces are treated as a single token.\r\n * `LineBreak`\r\n * `LineComment`\r\n * `BlockComment`\r\n\r\nIt's way easier to rebuild the JS string if the tokens already have line breaks\r\nand comments. It's also easier to identify if previous/next/current token is a\r\nLineBreak or Comment (sometimes needed for non-destructive transformations).\r\n\r\nRocambole structure might change in the future to keep the extraneous tokens\r\noutside the `tokens` array and also add an option to toggle the behavior.\r\n([issue #7](https://github.com/millermedeiros/rocambole/issues/7))\r\n\r\n\r\n## Extra Properties\r\n\r\nEach Node have the following extra properties/methods:\r\n\r\n  - `parent` : Node|undefined\r\n  - `toString()` : string\r\n  - `next` : Node|undefined\r\n  - `prev` : Node|undefined\r\n  - `depth` : Number\r\n  - `startToken` : Token\r\n  - `endToken` : Token\r\n\r\nEach token also have:\r\n\r\n - `prev` : Token|undefined\r\n - `next` : Token|undefined\r\n\r\nBlockComment also have:\r\n\r\n  - `originalIndent`: String|undefined\r\n\r\nTo get a better idea of the generated AST structure try out\r\n[rocambole-visualize](http://piuccio.github.io/rocambole-visualize/).\r\n\r\n\r\n## Linked List\r\n\r\nYou should **treat the tokens as a linked list instead of reading the\r\n`ast.tokens` array** (inserting/removing items from a linked list is very cheap\r\nand won't break the loop). You should grab a reference to the `node.startToken`\r\nand get `token.next` until you find the desired token or reach the end of the\r\nprogram. To loop between all tokens inside a node you can do like this:\r\n\r\n```js\r\nvar token = node.startToken;\r\nwhile (token !== node.endToken.next) {\r\n    doStuffWithToken(token);\r\n    token = token.next;\r\n}\r\n```\r\n\r\nThe method `toString` loops through all tokens between `node.startToken` and\r\n`node.endToken` grabbing the `token.raw` (used by comments) or `token.value`\r\nproperties. To implement a method similar to falafel `update()` you can do\r\nthis:\r\n\r\n```js\r\nfunction update(node, str){\r\n    var newToken = {\r\n        type : 'Custom', // can be anything (not used internally)\r\n        value : str\r\n    };\r\n    // update linked list references\r\n    if ( node.startToken.prev ) {\r\n        node.startToken.prev.next = newToken;\r\n        newToken.prev = node.startToken.prev;\r\n    }\r\n    if ( node.endToken.next ) {\r\n        node.endToken.next.prev = newToken;\r\n        newToken.next = node.endToken.next;\r\n    }\r\n    node.startToken = node.endToken = newToken;\r\n}\r\n```\r\n\r\n\r\n## Helpers\r\n\r\nI plan to create helpers as separate projects when possible.\r\n\r\n - [rocambole-token](https://github.com/millermedeiros/rocambole-token): helpers for token manipulation/traversal\r\n - [rocambole-node](https://github.com/millermedeiros/rocambole-node): helpers for node manipulation/traversal\r\n\r\nThere are a few nice helpers on [esformatter](https://github.com/millermedeiros/esformatter/) to deal with indentation, white spaces and line breaks that might be useful.\r\n\r\n\r\n## API\r\n\r\n\r\n### rocambole.parse\r\n\r\nParses a string and instrument the AST with extra properties/methods.\r\n\r\n```js\r\nvar rocambole = require('rocambole');\r\nvar ast = rocambole.parse(string);\r\nconsole.log( ast.startToken );\r\n// to get a string representation of all tokens call toString()\r\nconsole.log( ast.toString() );\r\n```\r\n\r\n\r\n### rocambole.moonwalk\r\n\r\nThe `moonwalk()` starts at the leaf nodes and go down the tree until it reaches\r\nthe root node (`Program`). Each node will be traversed only once.\r\n\r\n```js\r\nrocambole.moonwalk(ast, function(node){\r\n    if (node.type == 'ArrayExpression'){\r\n        console.log( node.depth +': '+ node.toString() );\r\n    }\r\n});\r\n```\r\n\r\nTraverse order:\r\n\r\n```\r\n Program [#18]\r\n `-FunctionDeclaration [#16]\r\n   |-BlockStatement [#14]\r\n   | |-IfStatement [#12]\r\n   | | |-BynaryExpression [#9]\r\n   | | | |-Identifier [#4]\r\n   | | | `-Literal [#5]\r\n   | | `-BlockStatement [#10]\r\n   | |   `-ExpressionStatement [#6]\r\n   | |     `-AssignmentExpression [#3]\r\n   | |       |-Identifier [#1 walk starts here]\r\n   | |       `-Literal [#2]\r\n   | `-VariableDeclaration [#13]\r\n   |   `-VariableDeclarator [#11]\r\n   |     |-Identifier [#7]\r\n   |     `-Literal [#8]\r\n   `-ReturnStatement [#17]\r\n     `-Identifier [#15]\r\n```\r\n\r\nThis behavior is very different from node-falafel and node-burrito.\r\n\r\n\r\n### rocambole.walk / rocambole.recursive\r\n\r\nIt loops through all nodes on the AST starting from the root node (`Program`),\r\nsimilar to `node-falafel`.\r\n\r\n```js\r\nrocambole.walk(ast, function(node){\r\n    console.log(node.type);\r\n});\r\n```\r\n\r\n\r\n## Popular Alternatives\r\n\r\n - [burrito](https://github.com/substack/node-burrito)\r\n - [falafel](https://github.com/substack/node-falafel)\r\n\r\n\r\n\r\n## Unit Tests\r\n\r\nBesides the regular unit tests we also use\r\n[istanbul](https://github.com/yahoo/istanbul) to generate code coverage\r\nreports, tests should have at least 95% code coverage for statements, branches\r\nand lines and 100% code coverage for functions or travis build will fail.\r\n\r\nWe do not run the coverage test at each call since it slows down the\r\nperformnace of the tests and it also makes it harder to see the test results.\r\nTo execute tests and generate coverage report call `npm test --coverage`, for\r\nregular tests just do `npm test`.\r\n\r\nCoverage reports are not committed to the repository since they will change at\r\neach `npm test --coverage` call.\r\n\r\n\r\n\r\n## License\r\n\r\nMIT\r\n\r\n\r\n\r\n## Changelog\r\n\r\n### next\r\n\r\n - aliased `rocambole.recursive` as `rocambole.walk` to avoid confusions.\r\n - switched `esprima` dependency to `esprima-fb` because of ES6 features.\r\n\r\n### v0.3.6 (2014/06/23)\r\n\r\n - really handle sparse arrays (eg. `[,]`), fixes moonwalk. (#15)\r\n\r\n### v0.3.5 (2014/06/23)\r\n\r\n - handle sparse arrays (eg. `[,]`). (#15)\r\n\r\n### v0.3.4 (2014/06/23)\r\n\r\n - only add `BlockComment.originalIndent` if `WhiteSpace` is on the start of\r\n   a line.\r\n\r\n### v0.3.3 (2014/04/26)\r\n\r\n - add `toString` to empty programs AST (#16)\r\n\r\n### v0.3.2 (2014/01/17)\r\n\r\n - exports `BYPASS_RECURSION` (#8)\r\n - fix error if input is empty (#12)\r\n - support anything that implements `toString()` as input (#13)\r\n\r\n### v0.3.1 (2013/12/15)\r\n\r\n - fix `originalIndent` on `BlockComment` when prev token is not `WhiteSpace`.\r\n\r\n### v0.3.0 (2013/12/15)\r\n\r\n - add `originalIndent` to `BlockComment` (#11)\r\n\r\n### v0.2.3 (2013/01/08)\r\n\r\n - improve `rocambole.parse()` performance by 4500%. (#4)\r\n - improve `rocambole.moonwalk()` performance by 11000%.\r\n\r\n### v0.2.2 (2012/12/19)\r\n\r\n - fix consecutive comments before start of program. (#3)\r\n\r\n### v0.2.1 (2012/12/13)\r\n\r\n - fix `loc` info on `WhiteSpace` and `LineBreak` tokens. (#2)\r\n\r\n### v0.2.0 (2012/12/09)\r\n\r\n - Deprecated:\r\n   - `token.before()`\r\n   - `token.after()`\r\n   - `token.remove()`\r\n   - `node.getTokens()`\r\n   - `ast.nodes`\r\n - avoid recursion over comments.\r\n - fix weird bug on esformatter introduced on v0.1.1 related to `token._ast`\r\n   property.\r\n\r\n### v0.1.1 (2012/12/08)\r\n\r\n - Improve token manipulation methods behavior (`before`, `after`, `remove`)\r\n\r\n### v0.1.0 (2012/12/06)\r\n\r\n - Initial release\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/millermedeiros/rocambole.git"
  },
  "scripts": {
    "test": "istanbul test test/runner.js"
  },
  "version": "0.3.6"
}
